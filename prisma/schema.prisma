generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  REGULAR
  BASIC
  AUTHOR
  SPONSOR
  ADMIN
}

model User {
  id          String         @id @default(uuid())
  username    String         @unique
  email       String         @unique
  displayName String
  password    String
  role        UserRole        @default(REGULAR)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  favorites   GameFavorite[]
  games       Game[]
  achievements UserAchievement[]
  pageViews   PageView[]

  @@map("users")
}

model Game {
  id            String         @id @default(uuid())
  title         String
  description   String
  imageUrl      String?
  playUrl       String
  authorId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tagcategory   String?
  xaccount      String?
  galleryImage1 String?
  galleryImage2 String?
  galleryImage3 String?
  galleryImage4 String?
  featured      Boolean        @default(false)
  favoritedBy   GameFavorite[]
  metrics       GameMetrics?
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("games")
}

model GameFavorite {
  userId    String
  gameId    String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, gameId])
  @@map("game_favorites")
}

model Sponsor {
  id          String   @id @default(uuid())
  name        String
  description String
  logoUrl     String
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sponsors")
}

model GameMetrics {
  id          String   @id @default(uuid())
  gameId      String   @unique
  views       Int      @default(0)
  plays       Int      @default(0)
  likes       Int      @default(0)
  dislikes    Int      @default(0)
  lastUpdated DateTime @default(now()) @updatedAt
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_metrics")
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  status    String   @default("active") // active, unsubscribed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscribers")
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model PageView {
  id          String   @id @default(uuid())
  path        String
  userId      String?
  userAgent   String?
  referer     String?
  timestamp   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("page_views")
}
